<?php


// menu stuff
function getEntry(){
        echo "# ";
        $resp = trim(fgets(STDIN));
        return $resp;
}
function getPasswordStr() {
        $oldStyle = shell_exec('stty -g');
        shell_exec('stty -icanon -echo min 1 time 0');
        $password = '';
        while (true) {
            $char = fgetc(STDIN);
            if ($char === "\n") {
                break;
            } else if (ord($char) === 127) {
                if (strlen($password) > 0) {
                    fwrite(STDOUT, "\x08 \x08");
                    $password = substr($password, 0, -1);
                }
            } else {
                fwrite(STDOUT, "*");
                $password .= $char;
            }
        }
        // Reset old style
        shell_exec('stty ' . $oldStyle);
        // Return the password
        return $password;
}

function getIP(){
	$cmd = "hostname -I";
	return trim(shell_exec($cmd));
}

function isDHCP(){
	$cmd = "cat /etc/network/interfaces | grep \"iface eth0\"";
	$r = trim(shell_exec($cmd));
	if (strpos($r, "dhcp") === false){ return false; }
	return true;
}

function enableDHCP(){
	$s ="auto lo\n iface lo inet loopback\nauto eth0\n iface eth0 inet dhcp";
	$fn = "/etc/network/interfaces";
	file_put_contents($fn, $s);
}
function setStaticIP($err=0){
	if($err > 3){ return false; }
        echo "Enter IP Address/mask (eg. 192.168.1.10/24): ";
        $ip = trim(fgets(STDIN));
	if(!strpos($ip, '/')){
		echo "Missing Subnet Mask\n";
		return setStaticIP($err++);
	}else{
		list( $clean, $mask ) = explode( '/', $ip, 2 );
		if(!filter_var($clean, FILTER_VALIDATE_IP)) {
			echo "Invalid IP ($clean)\n";
			return setStaticIP($err++);
		}
	}
        echo "Enter Default Gateway: ";
        $gw = trim(fgets(STDIN));
        echo "Enter DNS Server: ";
        $dns = trim(fgets(STDIN));

        echo "You entered:\n";
        echo "IP: $ip\n";
        echo "Gateway: $gw\n";
        echo "DNS: $dns\n";
        echo "Is this correct? (y/n) ";
        $res = trim(fgets(STDIN));
        if($res == "y" || $res == "Y"){
		$s ="auto lo\n iface lo inet loopback\nauto eth0\n iface eth0 inet static\n";
		$s .= "\taddress $ip\n";
		$s .= "\tgateway $gw\n";
		$fn = "/etc/network/interfaces";
		file_put_contents($fn, $s);

		$s = "nameserver $dns";
		$fn = "/tmp/resolv.conf";
		file_put_contents($fn, $s);
		shell_exec("sudo cp /tmp/resolv.conf /etc/");
        }else{
		return false;
	}
	return true;
}

function getCurrentDS($type){
	$ads = new stdClass();

	$t = "ads";
	if($type == "ods"){ $t = "ods"; }

	$cmd = "mount | grep $t | awk {'print $1'}";
	$ads->path = str_replace('\040', " ", trim(shell_exec($cmd)) );

	$cmd = "mount | grep $t | awk {'print $5'}";
	$ads->type = strtoupper(trim(shell_exec($cmd)) );
	if($ads->type == "FUSE"){ $ads->type = "S3 Compatible"; }



	return $ads;
}

function getSvcStatus(){
	$mode = getNodeMode();

        $cmd = "pgrep blockvaulter";
        $isRunning = trim(shell_exec($cmd));
	if($mode ==0){ return $isRunning; }

	return $isRunning;
}

function getSvcStatusText(){
        $stat = "\033[1;31mSTOPPED\033[0m";
        $isRunning = getSvcStatus();

	$mode = getNodeMode();
	if($mode ==0){
                return "\033[1;32mRunning\033[0m";	// managers don't use the docker.up convention
	}


        if($isRunning){
//                if (file_exists("/mnt/ads/docker.up")){
                        $stat = "\033[1;32mRunning\033[0m";
//                }else{
//                        $stat = "\033[1;33mStarting\033[0m";
//                }
        }
        return $stat;
}

function formatVolume($name){
        echo "Formatting now...";
        $cmd = "sudo /sbin/mkfs.ext4 /dev/$name ";
        exec($cmd);
        $cmd = "sudo /bin/chown alike.alike /dev/$name ";
        exec($cmd);
        echo "Format complete.\n";
}

// allows user to pick a local disk/volume for use as a datastore
function getLocalVolumeForDS(){
        $disks = getViableDisks();
        if(count($disks)==0){
                echo "Sorry, no local disks/volumes were found.\n";
                echo "Only block devices or volumes that are not currently mounted can be used.\n";
                echo "Press any key to continue.";
                $inp = trim(fgets(STDIN));
                return "";
        }
        $guys = array();
        $i=0;
        foreach($disks as $d){ $guys[$i] = $d; $i++; }
        echo "Available local disks/volumes for use:\n";
        foreach($guys as $i =>$d){
                $sz = bytesToString($d->size);
                $model = trim($d->model);
                $type = "Disk";
                if($d->type != "disk"){
                        $type = "$d->fstype volume";
                }else{
                        if($model == ""){ $type = "Local Disk"; }
                        else{$type = $model; }
                }
                print opt($i). " $d->name [$type]  ($sz) \n";
        }
        print opt("x"). " Exit and return to main menu \n\n";
        echo "Please enter your choice: ";
        $inp = trim(fgets(STDIN));
        if($inp =="X" || $inp == "x"){
		return;
        }
        if(is_numeric($inp)== false || $inp > count($guys)){
                return getLocalVolumeForDS();
        }else{
                $isNew=false;
                $d = $guys[$inp];
                $name = $d->name;
                echo "You selected: $name\n";
                if($d->type == "disk"){
                        echo "You selected a disk (not partition).\n";
                        echo "If you proceed, this disk will be FORMATTED now.\n";
                        echo "This will ERASE all data on this disk!\n";
                        echo "Proceed? (y/N) ";
                        $inp = trim(fgets(STDIN));
                        if($inp =="y" || $inp == "Y"){
                                $cmd = "sudo parted /dev/$name --script -- mklabel gpt mkpart primary 0% 100%";
                                exec($cmd);
                                echo "Disk has been partitioned.\n";
                                exec('sync');
                                sleep(1);
                                $name = $name."1";
                                formatVolume($name);
                                $isNew=true;
                        }else{
                                echo "Skipping.\n\n";
                                return getLocalVolumeForDS();
                        }
                 }else if($d->fstype ==""){
                        echo "Looks like this volume ($name) is not formatted.\n";
                        echo "Format it now? (y/N) ";
                        $inp = trim(fgets(STDIN));
                        if($inp =="y" || $inp == "Y"){
                                formatVolume($name);
                                $isNew=true;

                        }else{
                                echo "Exiting.\n\n";
                                return getLocalVolumeForDS();
                        }
                }
                return "/dev/$name";
        }
}

function getMountFreeMB($path){
        $cmd = "df -B 1M $path  | grep -v 'Available' | awk '{ print $3 }'";
        $free =  trim(shell_exec($cmd));
        return $free;
}

function doWebPost($url, $o){
        $data = array('data' => $o );
        $options = array(
            'http' => array(
                'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
                'method'  => 'POST',
                'content' => http_build_query($data)
            )
        );
        $context  = stream_context_create($options);
        $result = file_get_contents($url, false, $context);
        if ($result === FALSE) {
                $res = new stdClass();
                $res->result = "error";
                $res->message = "Webservice encountered an error ($url)!";
                echo "Webservice encountered an error ($url)!\n";
                return $res;
        }
        return $result;
}


function getA3Info(){

	$out = new stdClass();
	$out->guid = "N/A";
        $file = "/mnt/ads/guid.id";
	if(!file_exists($file)){
		return $out;
	}

	$out->guid = trim(file_get_contents($file));;
	return $out;
}

function getLatestBuildNum($force=false){
	$cache = "/tmp/latest.bld";
	if(file_exists($cache) && filemtime($cache) > (time() - 3600)  && $force==false){
		return trim(file_get_contents($cache));
	}
	$url = "https://raw.githubusercontent.com/quadricsoftware/alike/main/build.num";
	$res = json_decode(shell_exec("wget $url -q -O -"));
	return trim($res);
}


function getModeStr($mode){
	if($mode ==0){ return "Manager"; }
	else if($mode ==1){ return "Headless Node"; }
	else if($mode ==2){ return "Full Stack"; }
}
function setNodeMode($m){
	if(!is_numeric($m)){ throw new Exception("Invalid node mode: $m"); }
	if($m <0 || $m>2){ throw new Exception("Invalid node mode: $m"); }

	$fn = "/home/alike/configs/node_mode";
	file_put_contents($fn, $m);
}


function isModeDefined(){
	$fn = "/home/alike/configs/node_mode";
	if(file_exists($fn)){ return true; }
	return false;
}

function genToken(){
	$len = 12;
	$half = ceil($len / 2);
	$tok = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, $len);
	$tok = substr_replace($tok, '-', $half, 0);
	return $tok;
}

function getAllIPs(){
        $out = shell_exec("/sbin/ip -o -4 addr show | awk '{print $2, $4}' | grep -v '^br-' | grep -v 127.0.0.1 | grep -v '^docker'");
        $ips = [];
        $lines = explode("\n", trim($out));
        foreach ($lines as $line) {
		$line = preg_replace('/\s+/', ' ', $line);
		list($dev, $ip) = explode(' ',$line);
		list($ip, $mask) = explode('/',$ip);
                $ips[] = $ip;
        }
        return $ips;
}

function getEnvs(){
        $env = "/home/alike/.env";
        $envs = [];
        $lines = explode(PHP_EOL, @file_get_contents($env));
        foreach ($lines as $line) {
                $pair = explode('=', trim($line));
                if (count($pair) == 2) {
                        $key = trim($pair[0]);
                        $value = trim($pair[1]);
                        $envs[$key] = $value;
		}
        }
        return $envs;
}
function checkEnvs(){

	// we should check if there is an ADS or not

	return true;
}


function pickIP(){
        $ips = getAllIPs();
	if( count($ips) ==1){ 
		// if just one, return it
		return $ips[0]; 
	}	 
	else if(count($ips) == 0){ return false; }

        echo "Please select your hostIP:\n";
        echo "This IP will be used by clients to connect to your A3\n";
        for($i=0; $i < count($ips);  $i++){
                echo "$i) ". $ips[$i] ."\n";
        }
        $resp = getChoice();

        while($resp < 0 || $resp > count($ips) -1){
                echo "Invalid choice ($resp).  Choose again:\n";
                $resp = getChoice();
        }
        echo "You selected: ". $ips[$resp] ."\n";
        return $ips[$resp];
}

function checkNFSSec($list, $ip){
    $ipArray = explode(',', $list);
    foreach ($ipArray as $entry) {
        $entry = trim($entry);

        // Check if the entry is an IP or a subnet
        if (filter_var($entry, FILTER_VALIDATE_IP)) {
            // Check if the localIP matches the specific IP
            if ($localIP === $entry) {
                return true;
            }
        } elseif (strpos($entry, '/') !== false){

            // Check if localIP is in the specified subnet
            list($subnet, $mask) = explode('/', $entry);
            if ((ip2long($ip) & ~((1 << (32 - $mask)) - 1)) == ip2long($subnet)) {
                return true;
            }
	}
    }

    return false;
}
function getLocalIPs() {
	$output = shell_exec('ip address show');
	preg_match_all('/inet ([\d.]+)/', $output, $matches);
	$ips = array();
	foreach($matches[1] as $m){
		if($m != "127.0.0.1" && $m != "172.17.0.1"){
			array_push($ips,$m);
		}
	}
	return $ips;
}

?>
